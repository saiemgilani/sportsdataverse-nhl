/* tslint:disable */
/* eslint-disable */
/**
 * NHL API
 * Documenting the publicly accessible portions of the NHL API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Game } from '../models';
import { GameBoxscores } from '../models';
import { GameContent } from '../models';
/**
 * GamesApi - axios parameter creator
 * @export
 */
export const GamesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This contains all data related to a game, from the boxscore, to play data and even on-ice coordinates. Be forewarned that, depending on the game, this endpoint can return a **lot** of data.
         * @summary Get all available data for an NHL game.
         * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGame: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGame.');
            }
            const localVarPath = `/game/{id}/feed/live`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * If you want detailed play information, you should use `/game/{id}/feed/live` or `/game/{id}/feed/live/diffPatch`.
         * @summary Get the boxscore for an NHL game.
         * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameBoxscore: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGameBoxscore.');
            }
            const localVarPath = `/game/{id}/boxscore`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get editorials, video replays and photo highlights for an NHL game.
         * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameContent: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGameContent.');
            }
            const localVarPath = `/game/{id}/content`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * You can use this to return a small subset of data relating to game.
         * @summary Get all available data for an NHL game after a specific time.
         * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
         * @param {string} startTimeCode The prospect ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameDiff: async (id: number, startTimeCode: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getGameDiff.');
            }
            // verify required parameter 'startTimeCode' is not null or undefined
            if (startTimeCode === null || startTimeCode === undefined) {
                throw new RequiredError('startTimeCode','Required parameter startTimeCode was null or undefined when calling getGameDiff.');
            }
            const localVarPath = `/game/{id}/feed/live/diffPatch`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (startTimeCode !== undefined) {
                localVarQueryParameter['startTimeCode'] = startTimeCode;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * GamesApi - functional programming interface
 * @export
 */
export const GamesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * This contains all data related to a game, from the boxscore, to play data and even on-ice coordinates. Be forewarned that, depending on the game, this endpoint can return a **lot** of data.
         * @summary Get all available data for an NHL game.
         * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGame(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Game>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).getGame(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * If you want detailed play information, you should use `/game/{id}/feed/live` or `/game/{id}/feed/live/diffPatch`.
         * @summary Get the boxscore for an NHL game.
         * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameBoxscore(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameBoxscores>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).getGameBoxscore(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get editorials, video replays and photo highlights for an NHL game.
         * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameContent(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<GameContent>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).getGameContent(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * You can use this to return a small subset of data relating to game.
         * @summary Get all available data for an NHL game after a specific time.
         * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
         * @param {string} startTimeCode The prospect ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getGameDiff(id: number, startTimeCode: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Game>> {
            const localVarAxiosArgs = await GamesApiAxiosParamCreator(configuration).getGameDiff(id, startTimeCode, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * GamesApi - factory interface
 * @export
 */
export const GamesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * This contains all data related to a game, from the boxscore, to play data and even on-ice coordinates. Be forewarned that, depending on the game, this endpoint can return a **lot** of data.
         * @summary Get all available data for an NHL game.
         * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGame(id: number, options?: any): AxiosPromise<Game> {
            return GamesApiFp(configuration).getGame(id, options).then((request) => request(axios, basePath));
        },
        /**
         * If you want detailed play information, you should use `/game/{id}/feed/live` or `/game/{id}/feed/live/diffPatch`.
         * @summary Get the boxscore for an NHL game.
         * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameBoxscore(id: number, options?: any): AxiosPromise<GameBoxscores> {
            return GamesApiFp(configuration).getGameBoxscore(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get editorials, video replays and photo highlights for an NHL game.
         * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameContent(id: number, options?: any): AxiosPromise<GameContent> {
            return GamesApiFp(configuration).getGameContent(id, options).then((request) => request(axios, basePath));
        },
        /**
         * You can use this to return a small subset of data relating to game.
         * @summary Get all available data for an NHL game after a specific time.
         * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
         * @param {string} startTimeCode The prospect ID.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getGameDiff(id: number, startTimeCode: string, options?: any): AxiosPromise<Game> {
            return GamesApiFp(configuration).getGameDiff(id, startTimeCode, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * GamesApi - object-oriented interface
 * @export
 * @class GamesApi
 * @extends {BaseAPI}
 */
export class GamesApi extends BaseAPI {
    /**
     * This contains all data related to a game, from the boxscore, to play data and even on-ice coordinates. Be forewarned that, depending on the game, this endpoint can return a **lot** of data.
     * @summary Get all available data for an NHL game.
     * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public getGame(id: number, options?: any) {
        return GamesApiFp(this.configuration).getGame(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * If you want detailed play information, you should use `/game/{id}/feed/live` or `/game/{id}/feed/live/diffPatch`.
     * @summary Get the boxscore for an NHL game.
     * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public getGameBoxscore(id: number, options?: any) {
        return GamesApiFp(this.configuration).getGameBoxscore(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get editorials, video replays and photo highlights for an NHL game.
     * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public getGameContent(id: number, options?: any) {
        return GamesApiFp(this.configuration).getGameContent(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * You can use this to return a small subset of data relating to game.
     * @summary Get all available data for an NHL game after a specific time.
     * @param {number} id The ID of the game. The first 4 digits identify the season of the game (ie. 2017 for the 2017-2018 season). The next 2 digits give the type of game, where 01 &#x3D; preseason, 02 &#x3D; regular season, 03 &#x3D; playoffs, 04 &#x3D; all-star. The final 4 digits identify the specific game number. For regular season and preseason games, this ranges from 0001 to the number of games played. (1271 for seasons with 31 teams (2017 and onwards) and 1230 for seasons with 30 teams). For playoff games, the 2nd digit of the specific number gives the round of the playoffs, the 3rd digit specifies the matchup, and the 4th digit specifies the game (out of 7).
     * @param {string} startTimeCode The prospect ID.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof GamesApi
     */
    public getGameDiff(id: number, startTimeCode: string, options?: any) {
        return GamesApiFp(this.configuration).getGameDiff(id, startTimeCode, options).then((request) => request(this.axios, this.basePath));
    }
}
