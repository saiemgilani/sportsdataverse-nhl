/* tslint:disable */
/* eslint-disable */
/**
 * NHL API
 * Documenting the publicly accessible portions of the NHL API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Rosters } from '../models';
import { Team } from '../models';
import { TeamStats } from '../models';
import { Teams } from '../models';
/**
 * TeamsApi - axios parameter creator
 * @export
 */
export const TeamsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an NHL team.
         * @param {number} id The ID of the team.
         * @param {string} [expand] Expand your response for some additional data.
         * @param {number} [season] Return a team&#x27;s specific season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam: async (id: number, expand?: string, season?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTeam.');
            }
            const localVarPath = `/teams/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (season !== undefined) {
                localVarQueryParameter['season'] = season;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get an NHL team's roster.
         * @param {number} id The ID of the team.
         * @param {number} [season] Return a team&#x27;s specific season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamRoster: async (id: number, season?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTeamRoster.');
            }
            const localVarPath = `/teams/{id}/roster`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (season !== undefined) {
                localVarQueryParameter['season'] = season;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all statistics for an NHL team.
         * @param {number} id The ID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamStats: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getTeamStats.');
            }
            const localVarPath = `/teams/{id}/stats`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get all NHL teams.
         * @param {string} [expand] Expand your response for some additional data.
         * @param {number} [season] Return a team&#x27;s specific season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeams: async (expand?: string, season?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/teams`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (expand !== undefined) {
                localVarQueryParameter['expand'] = expand;
            }

            if (season !== undefined) {
                localVarQueryParameter['season'] = season;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TeamsApi - functional programming interface
 * @export
 */
export const TeamsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get an NHL team.
         * @param {number} id The ID of the team.
         * @param {string} [expand] Expand your response for some additional data.
         * @param {number} [season] Return a team&#x27;s specific season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeam(id: number, expand?: string, season?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Team>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).getTeam(id, expand, season, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get an NHL team's roster.
         * @param {number} id The ID of the team.
         * @param {number} [season] Return a team&#x27;s specific season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamRoster(id: number, season?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Rosters>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).getTeamRoster(id, season, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all statistics for an NHL team.
         * @param {number} id The ID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeamStats(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TeamStats>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).getTeamStats(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get all NHL teams.
         * @param {string} [expand] Expand your response for some additional data.
         * @param {number} [season] Return a team&#x27;s specific season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTeams(expand?: string, season?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Teams>> {
            const localVarAxiosArgs = await TeamsApiAxiosParamCreator(configuration).getTeams(expand, season, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TeamsApi - factory interface
 * @export
 */
export const TeamsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get an NHL team.
         * @param {number} id The ID of the team.
         * @param {string} [expand] Expand your response for some additional data.
         * @param {number} [season] Return a team&#x27;s specific season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeam(id: number, expand?: string, season?: number, options?: any): AxiosPromise<Team> {
            return TeamsApiFp(configuration).getTeam(id, expand, season, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get an NHL team's roster.
         * @param {number} id The ID of the team.
         * @param {number} [season] Return a team&#x27;s specific season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamRoster(id: number, season?: number, options?: any): AxiosPromise<Rosters> {
            return TeamsApiFp(configuration).getTeamRoster(id, season, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all statistics for an NHL team.
         * @param {number} id The ID of the team.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeamStats(id: number, options?: any): AxiosPromise<TeamStats> {
            return TeamsApiFp(configuration).getTeamStats(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get all NHL teams.
         * @param {string} [expand] Expand your response for some additional data.
         * @param {number} [season] Return a team&#x27;s specific season.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTeams(expand?: string, season?: number, options?: any): AxiosPromise<Teams> {
            return TeamsApiFp(configuration).getTeams(expand, season, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TeamsApi - object-oriented interface
 * @export
 * @class TeamsApi
 * @extends {BaseAPI}
 */
export class TeamsApi extends BaseAPI {
    /**
     * 
     * @summary Get an NHL team.
     * @param {number} id The ID of the team.
     * @param {string} [expand] Expand your response for some additional data.
     * @param {number} [season] Return a team&#x27;s specific season.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeam(id: number, expand?: string, season?: number, options?: any) {
        return TeamsApiFp(this.configuration).getTeam(id, expand, season, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get an NHL team's roster.
     * @param {number} id The ID of the team.
     * @param {number} [season] Return a team&#x27;s specific season.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeamRoster(id: number, season?: number, options?: any) {
        return TeamsApiFp(this.configuration).getTeamRoster(id, season, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all statistics for an NHL team.
     * @param {number} id The ID of the team.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeamStats(id: number, options?: any) {
        return TeamsApiFp(this.configuration).getTeamStats(id, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get all NHL teams.
     * @param {string} [expand] Expand your response for some additional data.
     * @param {number} [season] Return a team&#x27;s specific season.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TeamsApi
     */
    public getTeams(expand?: string, season?: number, options?: any) {
        return TeamsApiFp(this.configuration).getTeams(expand, season, options).then((request) => request(this.axios, this.basePath));
    }
}
