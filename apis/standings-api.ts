/* tslint:disable */
/* eslint-disable */
/**
 * NHL API
 * Documenting the publicly accessible portions of the NHL API.
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { StandingTypes } from '../models';
import { Standings } from '../models';
/**
 * StandingsApi - axios parameter creator
 * @export
 */
export const StandingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all available NHL standing types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandingTypes: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/standingsTypes`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get NHL division standings.
         * @param {string} [season] Standings for a specified season.
         * @param {string} [date] Standings on a specified date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandings: async (season?: string, date?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/standings`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (season !== undefined) {
                localVarQueryParameter['season'] = (season as any instanceof Date) ?
                    (season as any).toISOString().substr(0,10) :
                    season;
            }

            if (date !== undefined) {
                localVarQueryParameter['date'] = (date as any instanceof Date) ?
                    (date as any).toISOString().substr(0,10) :
                    date;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Get NHL standings for a specific standing type.
         * @param {string} type Standing types:   * &#x60;byConference&#x60; - Standings by Conference   * &#x60;byDivision&#x60; - Standings by Division   * &#x60;byLeague&#x60; - Standings by League   * &#x60;divisionLeaders&#x60; - Division Leader standings   * &#x60;postseason&#x60; - Postseason Standings   * &#x60;preseason&#x60; - Preseason Standings   * &#x60;regularSeason&#x60; - Regular Season Standings   * &#x60;wildCard&#x60; - Wild card standings   * &#x60;wildCardWithLeaders&#x60; - Wild card standings with Division Leaders 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandingsByType: async (type: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getStandingsByType.');
            }
            const localVarPath = `/standings/{type}`
                .replace(`{${"type"}}`, encodeURIComponent(String(type)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.query) {
                query.set(key, options.query[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StandingsApi - functional programming interface
 * @export
 */
export const StandingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Get all available NHL standing types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStandingTypes(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<StandingTypes>> {
            const localVarAxiosArgs = await StandingsApiAxiosParamCreator(configuration).getStandingTypes(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get NHL division standings.
         * @param {string} [season] Standings for a specified season.
         * @param {string} [date] Standings on a specified date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStandings(season?: string, date?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Standings>> {
            const localVarAxiosArgs = await StandingsApiAxiosParamCreator(configuration).getStandings(season, date, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Get NHL standings for a specific standing type.
         * @param {string} type Standing types:   * &#x60;byConference&#x60; - Standings by Conference   * &#x60;byDivision&#x60; - Standings by Division   * &#x60;byLeague&#x60; - Standings by League   * &#x60;divisionLeaders&#x60; - Division Leader standings   * &#x60;postseason&#x60; - Postseason Standings   * &#x60;preseason&#x60; - Preseason Standings   * &#x60;regularSeason&#x60; - Regular Season Standings   * &#x60;wildCard&#x60; - Wild card standings   * &#x60;wildCardWithLeaders&#x60; - Wild card standings with Division Leaders 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStandingsByType(type: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Standings>> {
            const localVarAxiosArgs = await StandingsApiAxiosParamCreator(configuration).getStandingsByType(type, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StandingsApi - factory interface
 * @export
 */
export const StandingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary Get all available NHL standing types.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandingTypes(options?: any): AxiosPromise<StandingTypes> {
            return StandingsApiFp(configuration).getStandingTypes(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get NHL division standings.
         * @param {string} [season] Standings for a specified season.
         * @param {string} [date] Standings on a specified date.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandings(season?: string, date?: string, options?: any): AxiosPromise<Standings> {
            return StandingsApiFp(configuration).getStandings(season, date, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Get NHL standings for a specific standing type.
         * @param {string} type Standing types:   * &#x60;byConference&#x60; - Standings by Conference   * &#x60;byDivision&#x60; - Standings by Division   * &#x60;byLeague&#x60; - Standings by League   * &#x60;divisionLeaders&#x60; - Division Leader standings   * &#x60;postseason&#x60; - Postseason Standings   * &#x60;preseason&#x60; - Preseason Standings   * &#x60;regularSeason&#x60; - Regular Season Standings   * &#x60;wildCard&#x60; - Wild card standings   * &#x60;wildCardWithLeaders&#x60; - Wild card standings with Division Leaders 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStandingsByType(type: string, options?: any): AxiosPromise<Standings> {
            return StandingsApiFp(configuration).getStandingsByType(type, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StandingsApi - object-oriented interface
 * @export
 * @class StandingsApi
 * @extends {BaseAPI}
 */
export class StandingsApi extends BaseAPI {
    /**
     * 
     * @summary Get all available NHL standing types.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandingsApi
     */
    public getStandingTypes(options?: any) {
        return StandingsApiFp(this.configuration).getStandingTypes(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get NHL division standings.
     * @param {string} [season] Standings for a specified season.
     * @param {string} [date] Standings on a specified date.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandingsApi
     */
    public getStandings(season?: string, date?: string, options?: any) {
        return StandingsApiFp(this.configuration).getStandings(season, date, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * 
     * @summary Get NHL standings for a specific standing type.
     * @param {string} type Standing types:   * &#x60;byConference&#x60; - Standings by Conference   * &#x60;byDivision&#x60; - Standings by Division   * &#x60;byLeague&#x60; - Standings by League   * &#x60;divisionLeaders&#x60; - Division Leader standings   * &#x60;postseason&#x60; - Postseason Standings   * &#x60;preseason&#x60; - Preseason Standings   * &#x60;regularSeason&#x60; - Regular Season Standings   * &#x60;wildCard&#x60; - Wild card standings   * &#x60;wildCardWithLeaders&#x60; - Wild card standings with Division Leaders 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StandingsApi
     */
    public getStandingsByType(type: string, options?: any) {
        return StandingsApiFp(this.configuration).getStandingsByType(type, options).then((request) => request(this.axios, this.basePath));
    }
}
